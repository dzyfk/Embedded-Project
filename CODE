#include <iom16v.h>

#define  uchar unsigned char
#define  uint  unsigned int

uint w=0,q=1;
uchar yuan,yuan1,yuan2,yuan3;
uchar xin,xin1,xin2,xin3;

const  table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d, 0x07,
		           0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0XFF};
               
               
void delay(uint ms)     //*延时函数*//
{
        uint i,j;
	for(i=0;i<ms;i++)
	   {
	   for(j=0;j<1141;j++);
       }
}



void main()                      //*主函数*//
{
  yuan=1;
	yuan1=6;
	yuan2=0;
	yuan3=2;
   DDRB|=0X03;            // 0000 0011
 	 DDRA=0XFF;
	 
	 
	  do                     //显示Please 3~4秒
		{
		
		 show3();
		 q++;
		 
	    }while(q<250);
		
		PORTA=0X00;              //清屏
		PORTB|=BIT(0);
	  PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(0); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);

    while(1)
	 {
	 input();
  
	   mi();
	 }	

}


void show1()     //*显示函数1*//
{
		PORTA=0X73;
		PORTB|=BIT(0);
	  PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(0); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	
		PORTA=0X77;
		PORTB|=BIT(0);
	  PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(1); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	
		PORTA=0X6D;
		PORTB|=BIT(0);
	  PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(2); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	
		PORTA=0X6D;
		PORTB|=BIT(0);
	  PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(3); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
}


void show2()     //*显示函数2*//
{
		PORTA=0X79;
		PORTB|=BIT(0);
	  PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(0); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X50;
	PORTB|=BIT(0);
  PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(1); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X50;
	PORTB|=BIT(0);
	PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(2); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X5C;
	PORTB|=BIT(0);
	PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(3); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X50;
	PORTB|=BIT(0);
	PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(4); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	DDRD=0XFF;
	
}

void show3()     //*显示函数3*//
{
		PORTA=0X73;
		PORTB|=BIT(0);
	  PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(0); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X38;
	PORTB|=BIT(0);
	PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(1); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X79;
	PORTB|=BIT(0);
	PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(2); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X77;
	PORTB|=BIT(0);
	PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(3); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X6D;
	PORTB|=BIT(0);
	PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(4); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	PORTA=0X79;
	PORTB|=BIT(0);
	PORTB&=~BIT(0); 
	
	PORTA=0XFF;
	PORTA&=~BIT(5); 
	PORTB|=BIT(1);
	PORTB&=~BIT(1);
	delay(1);
	
}






void input()               //*输入密码程序*// 
{
while(w<4)
{

      if(key_press())
	   {
		  ++w;
		switch(w)
		{
           case 1:
	   	   xin=key_scan();
		   break;
		   case 2:
	   	   xin1=key_scan();
		   break;
		   case 3:
	   	   xin2=key_scan();
		   break;
		   case 4:
	   	   xin3=key_scan();
		   break;
		   default:
		   xin=xin1=xin2=xin3=0;
		   }
		   
		 } 
	  
		
	   
}


}






void mi()                    //*密码判断程序*// 
{
   if(((xin==yuan)&&(xin1==yuan1))&&((xin2==yuan2)&&(xin3==yuan3)))
   show1();
   else
   show2();
  
}

uchar key_press()       //*检测有无按下按键*// 
{
     uchar i;
     DDRC=0XFF;
	 PORTC=0XF0;
	 
	 DDRC=0X0F;
	 PORTC=0XF0;
	 i=PINC;
	 if(i==0XF0)
	 {
	   DDRC=0XFF;
	   return 0;
	 }
	 else
	 {
	   DDRC=0XFF;
	   return 1;
	 }
}

uchar key_scan()          //*检测按下的按键*//
{
     uchar key,i=0X7F,j;
     delay(10);
	 if(key_press())
	 {
	    do
		{
		 i=(i<<1|i>>7);
		 PORTC=i;
		 DDRC=0X0F;
		 
		 key=PINC;
		 j=key&0XF0;
		 
	    }while(j==0XF0);
		
		while(key_press());
		switch(key)
		{
           case 0xEE:
	   		key=0x0;xin2=0;
			break;
	   case 0xDE:
	   		key=0x1;xin=1;
			break; 
	   case 0xBE:
	   		key=0x2;xin3=2;
			break;
	   case 0x7E:
	   		key=0x3;
			break;
	   case 0xED:
	   		key=0x4;
			break;
	   case 0xDD:
	   		key=0x5;
			break;
	   case 0xBD:
	   		key=0x6;xin1=6;
			break;
	   case 0x7D:
	   		key=0x7;
			break;
	   case 0xEB:
	   		key=0x8;
			break;
	   case 0xDB:
	   		key=0x9;
			break;
	   case 0xBB:
	   		key=0xA;
			break;
	   case 0x7B:
	   		key=0xB;
			break;
	   case 0xE7:
	   		key=0xC;
			break;
	   case 0xD7:
	   		key=0xD;
			break;
	   case 0xB7:
	   		key=0xE;
			break;
	   case 0x77:
	   		key=0xF;
			break;
	   default:
	        key=16;		
		}
	 }
	 else
	 {
	    key=16;
	 }
	 return key;
}
